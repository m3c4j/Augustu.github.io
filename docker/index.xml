<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on 滴滴哒的技术分享</title><link>https://www.didida.top/docker/</link><description>Recent content in Docker on 滴滴哒的技术分享</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Augustu Scofield 2021</copyright><lastBuildDate>Tue, 13 Apr 2021 21:19:31 +0800</lastBuildDate><atom:link href="https://www.didida.top/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Redis</title><link>https://www.didida.top/docker/redis/</link><pubDate>Tue, 13 Apr 2021 21:31:35 +0800</pubDate><guid>https://www.didida.top/docker/redis/</guid><description>Redis docker pull redis docker run --name redis-bench \ -v /home/Develop/data/redis/conf:/data \ -p 127.0.0.1:6379:6379 \ -d redis docker run --name redis-bench \ -p 127.0.0.1:6379:6379 \ -d redis Redis 集合(Set) 命令 描述 SADD key member1 [member2] 向集合添加一个或多个成员 SCARD key 获取集合的成员数 SDIFF key1 [key2] 返回第一个集合与其他集合之间的差异 SDIFFSTORE destination key1 [key2] 返回给定所有集合的差集并存储在 destination 中 SINTER key1 [key2] 返回给定所有集合的交集 SINTERSTORE destination key1 [key2] 返回给定所有集合的交集并存储在 destination 中 SISMEMBER key member 判断 member 元素是否是集合 key 的成员 SMEMBERS key 返回集合中的所有成员 SMOVE source destination member 将 member 元素从 source 集合移动到 destination 集合 SPOP key 移除并返回集合中的一个随机元素 SRANDMEMBER key [count] 返回集合中一个或多个随机数 SREM key member1 [member2] 移除集合中一个或多个成员 SUNION key1 [key2] 返回所有给定集合的并集 SUNIONSTORE destination key1 [key2] 所有给定集合的并集存储在 destination 集合中 SSCAN key cursor [MATCH pattern] [COUNT count] 迭代集合中的元素 ref: https://www.</description></item><item><title>Rabbitmq</title><link>https://www.didida.top/docker/rabbitmq/</link><pubDate>Tue, 13 Apr 2021 21:30:50 +0800</pubDate><guid>https://www.didida.top/docker/rabbitmq/</guid><description>RabbitMQ docker pull rabbitmq:management docker run --name rabbitmq-bench \ -p 127.0.0.1:15672:15672 \ -p 127.0.0.1:5672:5672 \ -p 127.0.0.1:15692:15692 \ -e RABBITMQ_DEFAULT_USER=admin \ -e RABBITMQ_DEFAULT_PASS=123456 \ -d rabbitmq:management exchange ref: https://www.rabbitmq.com/tutorials/tutorial-three-go.html
types:
direct
topic
headers
fanout
It just broadcasts all the messages it receives to all the queues it knows
queue producer consumer</description></item><item><title>Mysql</title><link>https://www.didida.top/docker/mysql/</link><pubDate>Tue, 13 Apr 2021 21:27:42 +0800</pubDate><guid>https://www.didida.top/docker/mysql/</guid><description>mysql docker pull mysql:5.7 # 拉取 mysql 5.7 docker pull mysql # 拉取最新版mysql镜像 docker run -p 3306:3306 --name mysql-bench \ -v /run/media/mike/Data/Develop/data/mysql/tmp:/tmp \ -e MYSQL_ROOT_PASSWORD=123456 \ -d mysql docker run -p 127.0.0.1:3306:3306 --name mysql-bench \ -v /home/mike/Develop/data/mysql/conf:/etc/mysql \ -v /home/mike/Develop/data/mysql/mysql:/var/lib/mysql \ -v /home/mike/Develop/data/mysql/mysql-files:/var/lib/mysql-files \ -v /home/mike/Develop/data/mysql/logs:/var/log/mysql \ -e MYSQL_ROOT_PASSWORD=123456 \ -d mysql mysql -h 127.0.0.1 -P 3306 -u root -p 123456 ref: https://www.cnblogs.com/sablier/p/11605606.html
bench sysbench sysbench /usr/share/sysbench/oltp_read_write.lua \ --tables=5 \ --table_size=100 \ --mysql-user=root \ --mysql-password=123456 \ --mysql-host=127.</description></item><item><title>Monitor</title><link>https://www.didida.top/docker/monitor/</link><pubDate>Tue, 13 Apr 2021 21:26:52 +0800</pubDate><guid>https://www.didida.top/docker/monitor/</guid><description>Monitor docker pull prom/prometheus docker pull prom/node-exporter docker pull grafana/grafana docker run --name archlinux \ -p 127.0.0.1:9100:9100 \ -v /proc:/host/proc:ro \ -v /sys:/host/sys:ro \ -v /:/rootfs:ro \ --net=host \ -d prom/node-exporter docker run --name mysqld-exporter-mysql-bench \ -p 127.0.0.1:9104:9104 \ --link=mysql-bench:mysql \ -e DATA_SOURCE_NAME=&amp;#34;root:123456@(mysql:3306)/&amp;#34; \ -d prom/mysqld-exporter docker run --name prometheus \ -p 127.0.0.1:9090:9090 \ -v /home/mike/Develop/data/prometheus/conf/prometheus.yml:/etc/prometheus/prometheus.yml \ -d prom/prometheus docker run --name=grafana \ -p 127.0.0.1:3000:3000 \ -v /home/mike/Develop/data/grafana/data:/var/lib/grafana \ -d grafana/grafana # admin:admin -&amp;gt; admin:123456 # dashboard # 系统监控 1 Node Exporter for Prometheus Dashboard CN v20201010 https://grafana.</description></item><item><title>Gitlab</title><link>https://www.didida.top/docker/gitlab/</link><pubDate>Tue, 13 Apr 2021 21:25:16 +0800</pubDate><guid>https://www.didida.top/docker/gitlab/</guid><description>Gitlab docker run --name gitlab \ -p 127.0.0.1:22:22 \ -p 127.0.0.1:443:443 \ -p 127.0.0.1:80:80 \ -d gitlab/gitlab-ce docker run --name gitlab \ -p 127.0.0.1:22:22 \ -p 127.0.0.1:443:443 \ -p 127.0.0.1:80:80 \ --hostname gitlab.org \ -v /home/Mount/Develop/data/gitlab/etc:/etc/gitlab \ -v /home/Mount/Develop/data/gitlab/opt:/var/opt/gitlab \ -v /home/Mount/Develop/data/gitlab/log:/var/log/gitlab \ -d gitlab/gitlab-ce Kubernetes cluster https://hub.docker.com/r/gitlab/gitlab-ce</description></item><item><title>Elk</title><link>https://www.didida.top/docker/elk/</link><pubDate>Tue, 13 Apr 2021 21:23:59 +0800</pubDate><guid>https://www.didida.top/docker/elk/</guid><description>ELK Run docker pull sebp/elk docker run --name elk \ -p 127.0.0.1:5601:5601 \ -p 127.0.0.1:9200:9200 \ -p 127.0.0.1:5044:5044 \ -e ES_HEAP_SIZE=&amp;#34;2g&amp;#34; \ -e LS_HEAP_SIZE=&amp;#34;1g&amp;#34; \ -v /home/Develop/data/elk/es-data:/var/lib/elasticsearch \ -v /home/Develop/data/elk/logstash:/etc/logstash \ --link redis-bench:redis \ -d sebp/elk # -e TZ=&amp;#34;Asia/Shanghai&amp;#34; \ ref: https://elk-docker.readthedocs.io/#running-with-docker-compose
issue max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]
sudo vi /etc/sysctl.conf vm.max_map_count=655360 sudo sysctl -p ref: https://blog.csdn.net/tl1242616458/article/details/105602361/</description></item><item><title>Etcd</title><link>https://www.didida.top/docker/etcd/</link><pubDate>Tue, 13 Apr 2021 21:23:11 +0800</pubDate><guid>https://www.didida.top/docker/etcd/</guid><description>Etcd Install docker pull quay.io/coreos/etcd docker run --name etcd-node1 \ -p 127.0.0.1:2379:2379 \ -p 127.0.0.1:2380:2380 \ -e ALLOW_NONE_AUTHENTICATION=yes \ -e ETCD_NAME=node1 \ -d bitnami/etcd docker run --name e3w \ -p 127.0.0.1:8030:8080 \ --link etcd-node1:etcd \ -d soyking/e3w docker run --name etcd-node1 \ -p 127.0.0.1:2379:2379 \ -p 127.0.0.1:2380:2380 \ -e ETCD_LISTEN_CLIENT_URLS=http://127.0.0.1:2379 \ -e ETCD_LISTEN_PEER_URLS=http://127.0.0.1:2380 \ -e ETCD_INITIAL_ADVERTISE_PEER_URLS=http://127.0.0.1:2380 \ -e ALLOW_NONE_AUTHENTICATION=yes \ -e ETCD_INITIAL_CLUSTER=node1=http://127.0.0.1:2380 \ -e ETCD_NAME=node1 \ -d bitnami/etcd docker run --name etcd-node1 \ -p 127.</description></item></channel></rss>